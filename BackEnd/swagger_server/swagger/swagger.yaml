---
swagger: "2.0"
info:
  description: "Absolute legendary PyBroker BackEnd API"
  version: "1.0.0"
  title: "PyBroker"
host: "localhost:8080"
basePath: "/api"
tags:
- name: "portfolio"
  description: "Contains operations about a users portfolio"
- name: "stock"
  description: "Contains stock information"
- name: "user"
  description: "Contains operations about user"
schemes:
- "https"
- "http"
paths:
  /portfolio:
    get:
      tags:
      - "portfolio"
      summary: "Get all current positions"
      description: "Returns all the current stock positions of the logged in user"
      operationId: "get_portfolio"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PortfolioPosition"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - api_key: []
      x-swagger-router-controller: "swagger_server.controllers.portfolio_controller"
  /portfolio/value:
    get:
      tags:
      - "portfolio"
      summary: "Get the performance of the portfolio"
      description: "Returns the logged in users portfolio performance"
      operationId: "get_portfolio_value"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PortfolioValue"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - api_key: []
      x-swagger-router-controller: "swagger_server.controllers.portfolio_controller"
  /portfolio/transaction:
    post:
      tags:
      - "portfolio"
      summary: "Create a new stock transaction"
      description: "Creates and executes a transaction for the logged in user"
      operationId: "create_transaction"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "transaction_prepare_param"
        description: "The transaction to create."
        required: true
        schema:
          $ref: "#/definitions/TransactionPrepare"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Transaction"
        "400":
          description: "Insufficient cash to buy or stock quantity to sell"
          schema:
            $ref: "#/definitions/ApiError"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - api_key: []
      x-swagger-router-controller: "swagger_server.controllers.portfolio_controller"
  /stock:
    get:
      tags:
      - "stock"
      summary: "Get all stocks in database"
      description: "Returns all available stocks from the database"
      operationId: "get_stocks"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/StockSearchResult"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - api_key: []
      x-swagger-router-controller: "swagger_server.controllers.stock_controller"
  /stock/{symbol}/history:
    get:
      tags:
      - "stock"
      summary: "Get historical data of given stock"
      description: "Returns all available stocks from the database"
      operationId: "get_stock_history"
      produces:
      - "application/json"
      parameters:
      - name: "symbol"
        in: "path"
        description: "Symbol of searched stock"
        required: true
        type: "string"
      - name: "period"
        in: "query"
        description: "Period of stock data"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/StockValue"
        "404":
          description: "History for given stock not found"
          schema:
            $ref: "#/definitions/ApiError"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - api_key: []
      x-swagger-router-controller: "swagger_server.controllers.stock_controller"
  /stock/{symbol}/description:
    get:
      tags:
      - "stock"
      summary: "Get financials of given stock"
      description: "Returns financials which include dividend, p/e-value and much\
        \ more"
      operationId: "get_stock_description"
      produces:
      - "application/json"
      parameters:
      - name: "symbol"
        in: "path"
        description: "Symbol of searched stock"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/StockDescription"
        "404":
          description: "Description for given stock not found"
          schema:
            $ref: "#/definitions/ApiError"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - api_key: []
      x-swagger-router-controller: "swagger_server.controllers.stock_controller"
  /stock/{symbol}/sustainability:
    get:
      tags:
      - "stock"
      summary: "Get information about the sustainability of given stock"
      description: "Returned sustainability object that contains vital environmental\
        \ data of the given stock "
      operationId: "get_stock_sustainability"
      produces:
      - "application/json"
      parameters:
      - name: "symbol"
        in: "path"
        description: "Symbol of searched stock"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/StockSustainability"
        "404":
          description: "Sustainability-information for given stock not found"
          schema:
            $ref: "#/definitions/ApiError"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - api_key: []
      x-swagger-router-controller: "swagger_server.controllers.stock_controller"
  /user:
    get:
      tags:
      - "user"
      summary: "Get user from api_key"
      description: "This can only be done by the logged in user and will return a\
        \ user object"
      operationId: "get_user"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - api_key: []
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user"
      operationId: "create_user"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "user_param"
        description: "User object to create"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: "successful operation"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ApiError"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user"
      operationId: "delete_user"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - api_key: []
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
  /user/login:
    post:
      tags:
      - "user"
      summary: "Logs user into the system and returns api key"
      description: "Authenticates user and returns api key for other requests"
      operationId: "login_user"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "user_prepare_login_param"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/UserPrepareLogin"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AuthKey"
        "404":
          description: "User not found"
          schema:
            $ref: "#/definitions/ApiError"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ApiError"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: "This can only be done by the logged in user"
      operationId: "logout_user"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - api_key: []
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
  /user/settings:
    get:
      tags:
      - "user"
      summary: "Get the settings of the logged in user"
      description: "Returns the settings object of the logged in user"
      operationId: "get_user_settings"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Settings"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - api_key: []
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
    post:
      tags:
      - "user"
      summary: "Create/set settings for logged in user"
      description: "Create/set the broker settings for the logged in user"
      operationId: "create_user_settings"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "settings_param"
        description: "Created settings object"
        required: true
        schema:
          $ref: "#/definitions/Settings"
      responses:
        "200":
          description: "successful operation"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - api_key: []
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
    x-apikeyInfoFunc: "swagger_server.services.auth_service.api_key_auth"
definitions:
  Transaction:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      stockValue:
        $ref: "#/definitions/StockValue"
      amount:
        type: "integer"
        format: "int32"
      transactionType:
        type: "string"
        enum:
        - "buy"
        - "sell"
      transactionFee:
        type: "number"
        format: "float"
    example:
      stockValue:
        symbol: "symbol"
        stock_price: 1.4658129
        id: 6
        timestamp: "2000-01-23T04:56:07.000+00:00"
      transactionType: "buy"
      amount: 6
      transactionFee: 1.4658129
      id: 0
  TransactionPrepare:
    type: "object"
    properties:
      symbol:
        type: "string"
      amount:
        type: "integer"
        format: "int32"
      transactionType:
        type: "string"
        enum:
        - "buy"
        - "sell"
  StockSearchResult:
    type: "object"
    properties:
      symbol:
        type: "string"
      stockName:
        type: "string"
    example:
      symbol: "symbol"
      stockName: "stockName"
  StockValue:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      symbol:
        type: "string"
      stock_price:
        type: "number"
        format: "float"
      timestamp:
        type: "string"
        format: "date-time"
    example:
      symbol: "symbol"
      stock_price: 1.4658129
      id: 6
      timestamp: "2000-01-23T04:56:07.000+00:00"
  StockDescription:
    type: "object"
    properties:
      symbol:
        type: "string"
      stockName:
        type: "string"
      country:
        type: "string"
      logoUrl:
        type: "string"
        format: "uri"
      longDescription:
        type: "string"
      industry:
        type: "string"
      dividend:
        type: "string"
      marketCap:
        type: "integer"
        format: "int64"
      fiftyTwoWeekLow:
        type: "number"
        format: "float"
      fiftyTwoWeekHigh:
        type: "number"
        format: "float"
      fullTimeEmployees:
        type: "integer"
        format: "int32"
    example:
      longDescription: "longDescription"
      symbol: "symbol"
      country: "country"
      marketCap: 0
      fullTimeEmployees: 5
      stockName: "stockName"
      dividend: "dividend"
      industry: "industry"
      fiftyTwoWeekHigh: 1.4658129
      logoUrl: "http://example.com/aeiou"
      fiftyTwoWeekLow: 6.0274563
  StockSustainability:
    type: "object"
    properties:
      symbol:
        type: "string"
    example:
      symbol: "symbol"
    additionalProperties:
      type: "string"
  PortfolioPosition:
    type: "object"
    properties:
      symbol:
        type: "string"
      stockName:
        type: "string"
      logoUrl:
        type: "string"
        format: "uri"
      amount:
        type: "integer"
        format: "int32"
      stockValue:
        $ref: "#/definitions/StockValue"
      stock_buyin_price:
        type: "number"
        format: "float"
    example:
      stockValue:
        symbol: "symbol"
        stock_price: 1.4658129
        id: 6
        timestamp: "2000-01-23T04:56:07.000+00:00"
      symbol: "symbol"
      amount: 0
      stockName: "stockName"
      stock_buyin_price: 5.962134
      logoUrl: "http://example.com/aeiou"
  PortfolioValue:
    type: "object"
    properties:
      marketValue:
        type: "number"
        format: "float"
      timestamp:
        type: "string"
        format: "date-time"
    example:
      marketValue: 0.8008282
      timestamp: "2000-01-23T04:56:07.000+00:00"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      startingCapital:
        type: "number"
        format: "float"
      moneyAvailable:
        type: "number"
        format: "float"
    example:
      firstName: "firstName"
      lastName: "lastName"
      moneyAvailable: 1.4658129
      password: "password"
      id: 0
      startingCapital: 6.0274563
      email: "email"
  UserPrepareLogin:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"
    example:
      password: "password"
      email: "email"
  Settings:
    type: "object"
    properties:
      transactionFee:
        type: "number"
        format: "float"
    example:
      transactionFee: 0.8008282
  AuthKey:
    type: "object"
    properties:
      userId:
        type: "integer"
        format: "int64"
      authKey:
        type: "string"
      expiry:
        type: "string"
        format: "date-time"
    example:
      authKey: "authKey"
      expiry: "2000-01-23T04:56:07.000+00:00"
      userId: 0
  ApiError:
    type: "object"
    properties:
      detail:
        type: "string"
      status:
        type: "integer"
        format: "int32"
      title:
        type: "string"
      type:
        type: "string"
