# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Body(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, wkn: str=None, amount: int=None, transaction_type: str=None):  # noqa: E501
        """Body - a model defined in Swagger

        :param wkn: The wkn of this Body.  # noqa: E501
        :type wkn: str
        :param amount: The amount of this Body.  # noqa: E501
        :type amount: int
        :param transaction_type: The transaction_type of this Body.  # noqa: E501
        :type transaction_type: str
        """
        self.swagger_types = {
            'wkn': str,
            'amount': int,
            'transaction_type': str
        }

        self.attribute_map = {
            'wkn': 'wkn',
            'amount': 'amount',
            'transaction_type': 'transactionType'
        }

        self._wkn = wkn
        self._amount = amount
        self._transaction_type = transaction_type

    @classmethod
    def from_dict(cls, dikt) -> 'Body':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The body of this Body.  # noqa: E501
        :rtype: Body
        """
        return util.deserialize_model(dikt, cls)

    @property
    def wkn(self) -> str:
        """Gets the wkn of this Body.


        :return: The wkn of this Body.
        :rtype: str
        """
        return self._wkn

    @wkn.setter
    def wkn(self, wkn: str):
        """Sets the wkn of this Body.


        :param wkn: The wkn of this Body.
        :type wkn: str
        """

        self._wkn = wkn

    @property
    def amount(self) -> int:
        """Gets the amount of this Body.


        :return: The amount of this Body.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount: int):
        """Sets the amount of this Body.


        :param amount: The amount of this Body.
        :type amount: int
        """

        self._amount = amount

    @property
    def transaction_type(self) -> str:
        """Gets the transaction_type of this Body.


        :return: The transaction_type of this Body.
        :rtype: str
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type: str):
        """Sets the transaction_type of this Body.


        :param transaction_type: The transaction_type of this Body.
        :type transaction_type: str
        """
        allowed_values = ["buy", "sell"]  # noqa: E501
        if transaction_type not in allowed_values:
            raise ValueError(
                "Invalid value for `transaction_type` ({0}), must be one of {1}"
                .format(transaction_type, allowed_values)
            )

        self._transaction_type = transaction_type
