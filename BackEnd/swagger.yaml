swagger: "2.0"
info:
  description: "Absolute legendary PyBroker BackEnd API"
  version: "1.0.0"
  title: "PyBroker"
host: "pma.tutorialfactory.org"
basePath: "/api"
tags:
- name: "portfolio"
  description: "Contains operations about a users portfolio"
- name: "stock"
  description: "Contains stock information"
- name: "user"
  description: "Contains operations about user"
schemes:
- "https"
- "http"
paths:
  /portfolio:
    get:
      tags:
      - "portfolio"
      summary: "Get all current positions"
      description: "Returns all the current stock positions of the logged in user"
      operationId: "getPortfolio"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PortfolioPosition"
  /portfolio/value:
    get:
      tags:
      - "portfolio"
      summary: "Get the performance of the portfolio"
      description: "Returns the logged in users portfolio performance"
      operationId: "getPortfolioValue"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PortfolioValue"
  /portfolio/transaction:
    post:
      tags:
      - "portfolio"
      summary: "Create a new stock transaction"
      description: "Creates and executes a transaction for the logged in user"
      operationId: "createTransaction"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The transaction to create."
        required: true
        schema:
          type: "object"
          properties:
            wkn:
              type: "string"
            amount:
              type: "integer"
              format: "int32"
            transactionType:
              type: "string"
              format: "enum"
              enum: [buy,sell]
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Transaction"
  /stock:
    get:
      tags:
      - "stock"
      summary: "Get all stocks in database"
      description: "Returns all available stocks from the database"
      operationId: "getStocks"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/StockInfo"
  /stock/{wkn}/history:
    get:
      tags:
      - "stock"
      summary: "Get historical data of given stock"
      description: "Returns all available stocks from the database"
      operationId: "getStockHistory"
      produces:
      - "application/json"
      parameters:
      - name: "wkn"
        in: "path"
        description: "WKN of searched stock"
        required: true
        type: "string"
      - name: "period"
        in: "query"
        description: "Period of stock data"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/StockValue"
        "404":
          description: "data for stock and period not found"
  /stock/{wkn}/financials:
    get:
      tags:
      - "stock"
      summary: "Get financials of given stock"
      description: ""
      operationId: "getStockFinancials"
      produces:
      - "application/json"
      parameters:
      - name: "wkn"
        in: "path"
        description: "WKN of searched stock"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/StockFinancials"
        "404":
          description: "data for stock and period not found"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    post:
      tags:
      - "user"
      summary: "Logs user into the system and returns auth key"
      description: ""
      operationId: "loginUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "user"
        description: "The user to create."
        required: true
        schema:
          type: "object"
          required:
          - userName
          - password
          properties:
            email:
              type: "string"
            password:
              type: "string"
      responses:
        '200':
          description: The response
          schema:
            $ref: '#/definitions/AuthKey'
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{userid}:
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "userid"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
  /user/settings:
    post:
      tags:
      - "user"
      summary: "Create/set settings for logged in user"
      description: "Create/set the broker settings for the logged in user"
      operationId: "createUserSettings"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created settings object"
        required: true
        schema:
          $ref: "#/definitions/Settings"
      responses:
        default:
          description: "successful operation"
    get:
      tags:
      - "user"
      summary: "Get the settings of the logged in user"
      description: "Returns the settings of the logged in user"
      operationId: "getUserSettings"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Settings"
        "404":
          description: "No settings for the logged in user"
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Transaction:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      userId:
        type: "integer"
        format: "int64"
      wkn:
        type: "string"
      stockValueId:
        type: "integer"
        format: "int64"
      amount:
        type: "integer"
        format: "int32"
      transactionType:
        type: "string"
        enum: [buy, sell]
      transactionFee:
        type: "number"
        format: "float"
  StockInfo:
    type: "object"
    properties:
      wkn:
        type: "string"
      stockName:
        type: "string"
      countryId:
        type: "string"
      logoUrl:
        type: "string"
        format: "uri"
  StockValue:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      wkn:
        type: "string"
      marketValue:
        type: "number"
        format: "float"
      timestamp:
        type: "string"
        format: "date-time"
  StockFinancials:
    type: "object"
    properties:
      wkn:
        type: "string"
      longDescription:
        type: "string"
      country:
        type: "string"
      industry:
        type: "string"
      dividend:
        type: "string"
  PortfolioPosition:
    type: "object"
    properties:
      wkn:
        type: "string"
      amount:
        type: "integer"
        format: "int32"
      stockName:
        type: "string"
      countryId:
        type: "string"
      logoUrl:
        type: "string"
        format: "uri"
  PortfolioValue:
    type: "object"
    properties:
      marketValue:
        type: "number"
        format: "float"
      timestamp:
        type: "string"
        format: "date-time"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      startingCapital:
        type: "number"
        format: "float"
      moneyAvailable:
        type: "number"
        format: "float"
  Settings:
    type: "object"
    properties:
      transactionFee:
        type: "number"
        format: "float"
  AuthKey:
    type: "object"
    properties:
      userId:
        type: "integer"
        format: "int64"
      authKey:
        type: "string"
      expiry:
        type: "string"
        format: "date-time"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"